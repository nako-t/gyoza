---
import Layout from "@/layouts/Layout.astro";
import "@/pages/search/index.scss";

const data = [
  {
    img: "",
    shopName: "餃子",
    location: "渋谷",
    description: "美味しい",
  },
  {
    img: "",
    shopName: "",
    location: "",
    description: "美味しい",
  },
  {
    img: "",
    shopName: "",
    location: "",
    description: "美味しい",
  },
];
---

<Layout>
  <div class="search">
    {
      data.map((item, index) => (
        <div class="search__item" data-shop-modal="open" data-slideid={index}>
          <img src="" alt="" width="300" height="300" class="search__shopImg" />
          <h3 class="search__shopName">{item.shopName}</h3>
          <span class="search__location">{item.location}</span>
        </div>
      ))
    }
    <dialog class="shopModal" data-shop-modal="dialog">
      <button class="shopModal__closeButton" data-shop-modal="close"
        >閉じる</button
      >
      <div class="shopModal__slider">
        <div class="shopModal__slideWrapper" data-shop-modal="slideWrapper">
          {
            data.map((item, index) => (
              <div class="shopModal__slide" data-shop-modal="slide">
                <div class="shopModal__content">
                  <img src="" alt="" width="250" height="250" loading="lazy" />
                  <div class="shopModal__description">
                    <span>{item.shopName + index}</span>
                    <span>{item.location}</span>
                    <p>{item.description}</p>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
      <button
        class="shopModal__nextButton shopModal__slideButton"
        data-shop-modal="next"></button>
      <button
        class="shopModal__prevButton shopModal__slideButton"
        data-shop-modal="prev"></button>
    </dialog>
  </div>
</Layout>

<script>
  (() => {
    const initModal = (dialogElement: HTMLDialogElement) => {
      const modalToggles = document.querySelectorAll<HTMLElement>(
        '[data-shop-modal="open"]'
      );
      const closeButton = document.querySelector('[data-shop-modal="close"]');

      // 閉じる処理
      const closeModal = () => {
        dialogElement.close();
      };

      // 開く処理
      const openModal = () => {
        dialogElement.showModal();
      };

      modalToggles.forEach((modalToggle) => {
        const slideId = modalToggle.dataset.slideid;

        modalToggle.addEventListener("click", () => {
          console.log("modalToggle" + slideId);
          const slider = initSlider(Number(slideId));
          slider.updateSliderPosition(Number(slideId));
          openModal();
        });
      });

      // 閉じるボタン押下時
      closeButton?.addEventListener("click", () => {
        closeModal();
      });

      // backdrop押下時
      dialogElement?.addEventListener("click", (e) => {
        if (e.target === dialogElement) {
          closeModal();
        }
      });
    };

    const initSlider = (slideIndex: number) => {
      const slides = document.querySelectorAll('[data-shop-modal="slide"]');
      const slideWrapper = document.querySelector(
        '[data-shop-modal="slideWrapper"]'
      );
      const totalSlides = slides.length;
      const nextButton = document.querySelector('[data-shop-modal="next"]');
      const prevButton = document.querySelector('[data-shop-modal="prev"]');

      // スライドする処理
      const updateSliderPosition = (slideNumber: number) => {
        if (slideWrapper instanceof HTMLElement) {
          console.log("updateSliderPosition" + slideNumber);

          slideWrapper.style.transform = `translateX(${-slideNumber * 100}%)`;
        }
      };

      // 次に進む処理
      nextButton?.addEventListener("click", () => {
        console.log("next" + slideIndex);
        if (slideIndex < totalSlides - 1) {
          slideIndex++;
        } else {
          slideIndex = 0; // 最後のスライドで次へを押したら最初のスライドに戻る
        }
        updateSliderPosition(slideIndex);
      });

      // 前に戻る処理
      prevButton?.addEventListener("click", () => {
        if (slideIndex > 0) {
          slideIndex--;
        } else {
          slideIndex = totalSlides - 1; // 最初のスライドで前へを押したら最後のスライドに戻る
        }
        updateSliderPosition(slideIndex);
      });

      return {
        updateSliderPosition,
      };
    };

    const dialogElement = document.querySelector<HTMLDialogElement>(
      '[data-shop-modal="dialog"]'
    );

    if (!dialogElement) return;
    initModal(dialogElement);
  })();
</script>
