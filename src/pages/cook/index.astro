---
import Layout from "@/layouts/Layout.astro";
import "@/pages/cook/index.scss";

const recipe = [
  {
    title: "材料",
    explanation: "キャベツ、ニラを刻む",
  },
  {
    title: "切る",
    explanation: "キャベツ、ニラを刻む",
  },
  {
    title: "混ぜる",
    explanation: "ひき肉に調味料を入れる",
  },
  {
    title: "包む",
    explanation: "ひき肉に調味料を入れる",
  },
  {
    title: "焼く",
    explanation: "ひき肉に調味料を入れる",
  },
  {
    title: "完成",
    explanation: "ひき肉に調味料を入れる",
  },
];
---

<Layout>
  <div class="cookWrapper">
    <ol class="recipeLists">
      {
        recipe.map(({ explanation }, index) => (
          <li class="recipeLists__item" data-recipe={index}>
            {explanation}
            {index}
          </li>
        ))
      }
    </ol>
    <div class="tableOfContentsWrapper">
      <div class="tableOfContents__fixed">
        <nav class="tableOfContents">
          <ol class="tableOfContents__list">
            {
              recipe.map(({ title }, index) => (
                <li class="tableOfContents__item" data-table-of-contents>
                  {title}
                </li>
              ))
            }
          </ol>
        </nav>
      </div>
    </div>
  </div>
</Layout>

<script>
  const initRecipe = () => {
    const tableOfContentsItems = [
      ...document.querySelectorAll("[data-table-of-contents]"),
    ];

    tableOfContentsItems.map((item, index) => {
      item.addEventListener("click", () => {
        const target = document.querySelector(`[data-recipe="${index}"]`);
        target?.scrollIntoView({ behavior: "smooth", block: "center" });
      });
    });

    const changeColor = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          console.log("test");
        }
      });
    };

    const options = {
      root: null,
      rootMargin: "-50% 0px",
    };

    const observer = new IntersectionObserver(changeColor, options);

    const recipeListsItems = [...document.querySelectorAll("[data-recipe]")];

    if (recipeListsItems.length === 0) return;

    recipeListsItems.map((item) => {
      observer.observe(item);
    });

    const mql = window.matchMedia("(min-width: 768px)");

    function updateDisplayBasedOnWidth(e: MediaQueryListEvent) {
      if (e.matches) {
        // document.body.style.backgroundColor = "red";
        tableOfContentsItems.forEach((item, index) => {});
      } else {
        /* the viewport is more than 600 pixels wide */
        // document.body.style.backgroundColor = "blue";
        tableOfContentsItems.forEach((item, index) => {
          item.textContent = String(index);
        });
      }
    }

    mql.addEventListener("change", updateDisplayBasedOnWidth);
  };

  initRecipe();
</script>
