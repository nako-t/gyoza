---
// 表示するリストアイテムの配列を作成
const items = Array.from(
  { length: 10 },
  (_, index) => `リストアイテム ${index + 1}`
);
---

<div class="accordion-container">
  <ul class="list">
    {items.slice(0, 3).map((item) => <li>{item}</li>)}
    <div class="hidden-group">
      {items.slice(3).map((item) => <li>{item}</li>)}
    </div>
  </ul>
  <button class="toggle-button">すべて表示</button>
</div>

<style>
  .accordion-container {
    max-width: 600px;
    margin: 0 auto;
    position: relative;
  }

  .list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .list li {
    padding: 1rem;
    border-bottom: 1px solid #eee;
    background-color: white;
  }

  .hidden-group {
    display: none;
    opacity: 0;
    height: 0;
    overflow: hidden;
  }

  .toggle-button {
    padding: 0.5rem 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    position: absolute;
    left: 0;
  }

  .toggle-button:hover {
    background-color: #0056b3;
  }
</style>

<script>
  const toggleButton = document.querySelector(
    ".toggle-button"
  ) as HTMLButtonElement;
  const list = document.querySelector(".list") as HTMLUListElement;
  const hiddenGroup = document.querySelector(".hidden-group") as HTMLDivElement;

  if (toggleButton && list && hiddenGroup) {
    // アニメーションの設定
    const showAnimation = [
      {
        opacity: 0,
        height: 0,
      },
      {
        opacity: 1,
        height: "420px", // 7つのアイテム × 60px
      },
    ];

    const hideAnimation = [
      {
        opacity: 1,
        height: "420px",
      },
      {
        opacity: 0,
        height: 0,
      },
    ];

    const timing: KeyframeAnimationOptions = {
      duration: 500,
      easing: "ease-in-out",
      fill: "forwards",
    };

    let isExpanded = false;

    const updateButtonPosition = () => {
      const lastVisibleElement = isExpanded ? hiddenGroup : list.children[2];
      if (!lastVisibleElement) return;

      const rect = lastVisibleElement.getBoundingClientRect();
      const containerRect = list.getBoundingClientRect();
      toggleButton.style.top = `${rect.bottom - containerRect.top + 16}px`;
    };

    toggleButton.addEventListener("click", async () => {
      isExpanded = !isExpanded;
      toggleButton.textContent = isExpanded ? "閉じる" : "すべて表示";

      if (isExpanded) {
        hiddenGroup.style.display = "block";
        const animation = hiddenGroup.animate(showAnimation, timing);
        await animation.finished;
      } else {
        const animation = hiddenGroup.animate(hideAnimation, timing);
        animation.onfinish = () => {
          hiddenGroup.style.display = "none";
        };
        await animation.finished;
      }

      updateButtonPosition();
    });

    // 初期位置の設定
    updateButtonPosition();

    // ウィンドウリサイズ時にボタンの位置を更新
    window.addEventListener("resize", updateButtonPosition);
  }
</script>
