---
import "@/components/header/index.scss";
import Gyoza from "@/components/gyoza/index.astro";

const navItems = [
  {
    label: "探す",
    href: "/",
  },
  {
    label: "作る",
    href: "/",
  },
  {
    label: "知る",
    href: "/",
  },
];

// Cookieを使用して訪問履歴を確認
// const hasVisited = Astro.cookies.has("visited");
const hasVisited = false;
// 訪問済みでない場合はCookieを設定
if (!hasVisited) {
  Astro.cookies.set("visited", "true", {
    path: "/",
    maxAge: 60 * 60 * 24,
  });
}
---

<header class="header">
  {!hasVisited && <Gyoza />}
  <nav class="globalNavigation" data-global-navigation>
    <ul class="globalNavigation__inner" data-nav-items-container>
      {
        navItems.map((item) => (
          <li class="globalNavigation__item" data-nav-items>
            <a class="globalNavigation__link" href={item.href}>
              <span class="globalNavigation__link-text">{item.label}</span>
            </a>
          </li>
        ))
      }
    </ul>
    <div class="globalNavigation__cursor" data-nav-cursor></div>
  </nav>
  <button class="hamburgerButton" data-hamburger-button></button>
</header>

<script>
  const initNavigation = () => {
    const navItemsContainer = document.querySelector(
      "[data-nav-items-container]"
    );
    const navItems = document.querySelectorAll("[data-nav-items]");
    const cursor = document.querySelector("[data-nav-cursor]");

    if (
      !navItemsContainer ||
      !navItems ||
      !cursor ||
      !(cursor instanceof HTMLElement)
    )
      return;

    const updateHoverIndicator = (targetItem: Element) => {
      const targetRect = targetItem.getBoundingClientRect();
      const navItemsContainerRect = navItemsContainer.getBoundingClientRect();

      const newX = targetRect.left - navItemsContainerRect.left;

      cursor.style.width = `${targetRect.width}px`;
      cursor.style.height = `${targetRect.height}px`;

      cursor.animate(
        [
          {
            transform: window
              .getComputedStyle(cursor)
              .getPropertyValue("transform"),
          },
          {
            transform: `translate(${newX}px)`,
          },
        ],
        {
          duration: 300,
          easing: "ease-in-out",
          fill: "forwards", // アニメーション終了後に最終状態を維持
        }
      );
    };

    navItems.forEach((item) => {
      const itemRect = item.getBoundingClientRect();
      cursor.style.width = `${itemRect.width}px`;
      cursor.style.height = `${itemRect.height}px`;

      item.addEventListener("mouseenter", () => {
        updateHoverIndicator(item);
      });
    });

    navItemsContainer.addEventListener("mouseleave", () => {
      cursor.animate(
        [
          {
            transform: window
              .getComputedStyle(cursor)
              .getPropertyValue("transform"),
          },
          {
            transform: "translate(0px)",
          },
        ],
        {
          duration: 300,
          easing: "ease-in-out",
          fill: "forwards", // アニメーション終了後に最終状態を維持
        }
      );
    });
  };

  const initHamburgerButton = () => {
    const hamburgerButton = document.querySelector("[data-hamburger-button]");
    if (!hamburgerButton) return;

    hamburgerButton.addEventListener("click", () => {
      const globalNavigation = document.querySelector(
        "[data-global-navigation]"
      );
      if (!globalNavigation) return;

      globalNavigation.classList.toggle("is-active");
    });
  };

  initNavigation();
  initHamburgerButton();
</script>
